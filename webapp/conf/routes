# routes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Copyright â’¸ 2014-2015 Universiteit Gent
#
# This file is part of the Degage Web Application
#
# Corresponding author (see also AUTHORS.txt)
#
# Kris Coolsaet
# Department of Applied Mathematics, Computer Science and Statistics
# Ghent University
# Krijgslaan 281-S9
# B-9000 GENT Belgium
#
# The Degage Web Application is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The Degage Web Application is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with the Degage Web Application (file LICENSE.txt in the
# distribution).  If not, see http://www.gnu.org/licenses/.

# This file defines all application routes (Higher priority routes first)

# Home page
GET         /                                       controllers.Application.index()

# Diagnostics
GET         /diag/ok                                controllers.Diagnostics.checkApplication()
GET         /diag/db                                controllers.Diagnostics.checkDatabase()

# UserRoles
GET         /userroles                              controllers.UserRoles.index()
GET         /userroles/page                         controllers.UserRoles.showUsersPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /userroles/edit                         controllers.UserRoles.edit(userId: Int)
POST        /userroles/edit                         controllers.UserRoles.editPost(userId: Int)

# Reservation calendar
GET         /calendar                               controllers.Calendars.index()
GET         /calendar/list                          controllers.Calendars.listAvailableCarsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /calendar/cars                          controllers.Calendars.showCarsForReservation()
GET         /calendar/car                           controllers.Calendars.startCar()
GET         /calendar/car/availablility             controllers.Calendars.availabilityCar(id: Int, date: String?= null)
POST        /calendar/car                           controllers.Calendars.overviewCarPost()
GET         /calendar/car/index                     controllers.Calendars.indexWithCar(carName: String, id: Int)
GET         /calendar/date                          controllers.Calendars.overview(date: String ?= null)
POST        /calendar/date                          controllers.Calendars.overviewPost()
GET         /calendar/prefs                         controllers.Calendars.carPreferences()
POST        /calendar/prefs                         controllers.Calendars.doCarPreferences()

# Reservation workflow
GET         /reservation/create                     controllers.WFCreate.create(carId: Int, from: String, until: String)
POST        /reservation/create                     controllers.WFCreate.doCreate(carId: Int)
GET         /reservation/old                        controllers.WFCreate.createOld(carId: Int)
POST        /reservation/old                        controllers.WFCreate.doCreateOld(carId: Int)
GET         /reservation/shorten                    controllers.WFCreate.shortenReservation(id: Int)
POST        /reservation/shorten                    controllers.WFCreate.doShortenReservation(id: Int)

GET         /reservation/cancel                     controllers.WFCancel.cancelReservation(id: Int)
GET         /reservation/cancelaccepted             controllers.WFCancel.cancelAccepted(id: Int)
POST        /reservation/cancelaccepted             controllers.WFCancel.doCancelAccepted(id: Int)
GET         /reservation/late                       controllers.WFCancel.cancelLate(id: Int)
POST        /reservation/late                       controllers.WFCancel.doCancelLate(id: Int, soft: Boolean)

GET         /reservation/aor                        controllers.WFApprove.approveReservation(id: Int)
POST        /reservation/aor                        controllers.WFApprove.doApproveReservation(id: Int)
POST        /reservation/approve                    controllers.WFApprove.doApproveOldReservation(id: Int)
GET         /reservation/reminder                   controllers.WFApprove.sendReminder(id: Int)
POST        /reservation/reminder                   controllers.WFApprove.doSendReminder(id: Int)

# Trip workflow
GET         /trip/edit                              controllers.WFTrip.tripInfo(id: Int)
POST        /trip/new                               controllers.WFTrip.doNewTripInfo(id: Int)
POST        /trip/edit                              controllers.WFTrip.doEditTripInfo(id: Int)
GET         /trip/aor                               controllers.WFApprove.approveTripInfo(id: Int)
POST        /trip/aor                               controllers.WFApprove.doApproveTripInfo(id: Int)

# Display information about reservations / trips
GET         /trip                                   controllers.Trips.details(id: Int)
GET         /trips                                  controllers.Trips.index(tab : Int ?= 0)
GET         /trips/page                             controllers.Trips.showTripsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /trips/admin                            controllers.Trips.showTripsAdminPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /trips/overview                         controllers.Trips.overview(id: Int, date: String ?= null)
POST        /trips/overview                         controllers.Trips.doOverview(id: Int, date: String)

# Notifiers
GET         /messages                               controllers.Messages.showMessages()
GET         /messages/received/page                 controllers.Messages.showReceivedMessagesPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /messages/sent/page                     controllers.Messages.showSentMessagesPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /messages/markasread                    controllers.Messages.markMessageAsRead(messageId: Int)
GET         /messages/markallasread                 controllers.Messages.markAllMessagesAsRead()
GET         /messages/new                           controllers.Messages.newMessage()
POST        /messages/new                           controllers.Messages.createNewMessage()
GET         /messages/owner                         controllers.Messages.newMessageToOwner()
POST        /messages/owner                         controllers.Messages.sendMessageToOwner()
GET         /messages/reply                         controllers.Messages.reply(messageId: Int)
POST        /messages/reply                         controllers.Messages.sendReplyTo(messageId: Int)
GET         /notifications                          controllers.Notifications.showNotifications()
GET         /notifications/markasread               controllers.Notifications.markNotificationAsRead(notificationId: Int)
GET         /notifications/markallasread            controllers.Notifications.markAllNotificationsAsRead()
GET         /notifications/page                     controllers.Notifications.showNotificationsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")

# Profile pages
GET         /profile                                controllers.Profile.indexWithoutId()
GET         /profile/edit                           controllers.Profile.edit(userId: Int)
POST        /profile/edit                           controllers.Profile.editPost(userId: Int)
GET         /profile/byid                           controllers.Profile.index(userId: Int)
GET         /profile/changepicture                  controllers.Profile.profilePictureUpload(userId: Int)
POST        /profile/changepicture                  controllers.Profile.profilePictureUploadPost(userId: Int)
GET         /profile/picture                        controllers.Profile.getProfilePicture(userId: Int)
GET         /profile/identitycard                   controllers.Profile.editIdentityCard(userId: Int)
POST        /profile/identitycard                   controllers.Profile.editIdentityCardPost(userId: Int)
POST        /profile/identitycard/addfile           controllers.Profile.addIdentityCardFile(userId: Int)
GET         /profile/identitycard/deletefile        controllers.Profile.deleteIdentityFile(userId: Int, fileId: Int)
GET         /profile/identitycard/file              controllers.Profile.viewIdentityFile(userId: Int, fileId: Int)
GET         /profile/driverslicense                 controllers.Profile.editDriversLicense(userId: Int)
POST        /profile/driverslicense                 controllers.Profile.editDriversLicensePost(userId: Int)
GET         /profile/driverslicense/deletefile      controllers.Profile.deleteLicenseFile(userId: Int, fileId: Int)
GET         /profile/driverslicense/file            controllers.Profile.viewLicenseFile(userId: Int, fileId: Int)
POST        /profile/driverslicense/addfile         controllers.Profile.addDriversLicenseFile(userId: Int)
GET         /profile/status                         controllers.Profile.editUserStatus(userId: Int)
POST         /profile/status/block                   controllers.Profile.blockUser()
GET         /profile/status/unblock                 controllers.Profile.unblockUser(userId: Int, newStatus: String)
GET         /profile/status/drop                   controllers.Profile.dropUser()
GET         /profile/deposit                        controllers.Profile.deposit(userId: Int)
POST        /profile/deposit                        controllers.Profile.depositPost(userId: Int)
GET         /profile/email                          controllers.Profile.updateEmail(userId: Int)
POST        /profile/email                          controllers.Profile.updateEmailPost(userId: Int)
GET         /profile/accountnumber                  controllers.Profile.editAccountNumber(userId: Int)
POST        /profile/accountnumber                  controllers.Profile.editAccountNumberPost(userId: Int)
GET         /profile/paymentInfo                    controllers.Profile.updatePaymentInfo(userId: Int)
POST        /profile/paymentInfo                    controllers.Profile.updatePaymentInfoPost(userId: Int)

# Contract management
GET         /contracts                              controllers.Contracts.showContracts(tab : Int ?= 0)
GET         /contracts/page                         controllers.Contracts.showContractsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")

GET         /contracts/edit                         controllers.Contracts.contract(userId: Int, r: Referrer)
POST        /contracts/edit                         controllers.Contracts.contractPost(userId: Int, r: Referrer)


# Users
GET         /users                                  controllers.Users.showUsers()
GET         /users/tabbed                           controllers.Users.showUsersWithTabs(tab : Int ?= 0)
GET         /users/page                             controllers.Users.showUsersPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /users/impersonate                      controllers.Users.impersonate(userId: Int)

# Login screen
GET         /login                                  controllers.Login.login(redirect ?= null)
POST        /login                                  controllers.Login.authenticate(redirect ?= null)
GET         /logout                                 controllers.Login.logout()
GET         /admin/set                              controllers.Login.setAdmin()
GET         /admin/clear                            controllers.Login.clearAdmin()
GET         /pwreset/request                        controllers.Login.resetPasswordRequest()
POST        /pwreset/request                        controllers.Login.resetPasswordRequestPost()
GET         /pwreset                                controllers.Login.resetPassword(token: String)
POST        /pwreset                                controllers.Login.resetPasswordPost(token: String)
GET         /register/request                       controllers.Login.requestRegistration()
POST        /register/request                       controllers.Login.requestRegistrationPost()
GET         /register                               controllers.Login.registerVerification(token: String)
POST        /register                               controllers.Login.registerVerificationPost(token: String)

# Infosessions
GET         /infosession/new                        controllers.InfoSessions.newSession()
POST        /infosession/new                        controllers.InfoSessions.createNewSession()
GET         /infosession                            controllers.InfoSessions.showUpcomingSessions()
GET         /infosession/enrollWithCar/:id          controllers.InfoSessions.enrollWithCar(id: Int)
GET         /infosession/setInitialCarState/:carId     controllers.InfoSessions.setInitialCarState(carId: Int)
GET         /infosession/admin                      controllers.InfoSessions.showSessions()
GET         /infosession/page                       controllers.InfoSessions.showSessionsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /infosession/enroll                     controllers.InfoSessions.enrollSession(id: Int)
GET         /infosession/unenroll                   controllers.InfoSessions.unenrollSession()
GET         /infosession/view                       controllers.InfoSessions.detail(id: Int)
GET         /infosession/removeAttendee             controllers.InfoSessions.removeUserFromSession(sessionId: Int, userId: Int)
GET         /infosession/edit                       controllers.InfoSessions.editSession(sessionId: Int)
POST        /infosession/edit                       controllers.InfoSessions.editSessionPost(sessionId: Int)
GET         /infosession/status                     controllers.InfoSessions.setUserSessionStatus(sessionId: Int, userId: Int, status: String)
GET         /infosession/delete                     controllers.InfoSessions.removeSession(sessionId: Int)
POST        /infosession/adduser                    controllers.InfoSessions.addUserToSession(sessionId: Int)

GET         /infosessions                           controllers.InfoSessions.showUpcomingSessionsRaw()

# Approvals for membership
GET         /approval                               controllers.Approvals.requestApproval()
POST        /approval                               controllers.Approvals.requestApprovalPost()
GET         /approvals/page                         controllers.Approvals.pendingApprovalListPaged(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /approvals                              controllers.Approvals.pendingApprovalList(tab: Int ?= 0)
GET         /approval/aor                           controllers.Approvals.approvalApproveReject(id: Int)
POST        /approval/aor                           controllers.Approvals.approvalApproveRejectPost(id: Int)
GET         /approval/admin                         controllers.Approvals.approvalAdmin(id: Int)
POST        /approval/admin                         controllers.Approvals.approvalAdminPost(id: Int)

# Settings
GET         /settings/sysvars/edit                  controllers.Settings.editSysvar(name: String)
POST        /settings/sysvars/edit                  controllers.Settings.editSysvarPost(name: String)
GET         /settings/sysvars                       controllers.Settings.sysvarsOverview()
GET         /changepass                             controllers.Settings.changePassword()
POST        /changepass                             controllers.Settings.changePasswordPost()


# Cars
GET         /cars                                   controllers.Cars.showCars()
GET         /cars/page                              controllers.Cars.showCarsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /cars/new                               controllers.Cars.newCar()
POST        /cars/new                               controllers.Cars.addNewCar()
GET         /cars/view                              controllers.Cars.detail(id: Int)
GET         /cars/edit                              controllers.Cars.editCar(id: Int)
POST        /cars/edit                              controllers.Cars.editCarPost(id: Int)
GET         /cars/picture                           controllers.Cars.getPicture(id: Int)
GET         /cars/registration                      controllers.Cars.getRegistrationPicture(id: Int)
GET         /cars/contractpicture                   controllers.Cars.getContractPicture(id: Int)
GET         /cars/insurancepicture                  controllers.Cars.getInsurancePicture(id: Int)
GET         /cars/greencardpicture                  controllers.Cars.getGreenCardPicture(id: Int)
GET         /cars/assistancepicture                 controllers.Cars.getAssistancePicture(id: Int)
GET         /cars/parkingcardpicture                controllers.Cars.getParkingcardPicture(id: Int)
GET         /cars/modal/info                        controllers.Cars.getCarInfoModal(id: Int)
GET         /cars/privileges/edit                   controllers.Cars.updatePrivileged(id : Int, values : String)
GET         /cars/changepicture                     controllers.Cars.pictureUpload(id: Int)
POST        /cars/changepicture                     controllers.Cars.doPictureUpload(id: Int)
GET         /cars/deprec                            controllers.Cars.showDepreciation(id: Int)
POST        /cars/deprec                            controllers.Cars.doEditDepreciation(id: Int)
GET         /cars/initialstate                      controllers.Cars.showInitialStateFiles(id: Int)
POST        /cars/initialstate/addfile              controllers.Cars.addInitialStateFile(carId: Int)
GET         /cars/initialstate/deletefile           controllers.Cars.deleteInitialStateFile(carId: Int, fileId: Int)
GET         /cars/initialstate/file                 controllers.Cars.viewInitialStateFile(carId: Int, fileId: Int)

# Car preferences of current user
GET         /carprefs                               controllers.CarPreferences.edit()
POST        /carprefs                               controllers.CarPreferences.doEdit()

# Costs
GET         /costs/car                              controllers.Costs.showCostsForCar(id: Int)
GET         /costs/detail                           controllers.Costs.showCostDetail(id: Int)
GET         /costs/list                             controllers.Costs.showCosts(tab : Int ?= 0)
GET         /costs/page                             controllers.Costs.showCostsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /costs/proof                            controllers.Costs.getCarCostProof(id: Int)
GET         /costs/aor                              controllers.CostsApprove.approveOrReject(id: Int, h: Boolean)
POST        /costs/approve                          controllers.CostsApprove.doApprove(id: Int, h: Boolean)
POST        /costs/reject                           controllers.CostsApprove.doReject(id: Int, h: Boolean)
POST        /costs/external                         controllers.CostsApprove.doApproveExternal(id: Int, h: Boolean)
POST        /costs/new                              controllers.CostsCreate.doCreate(id: Int)
GET         /costs/edit                             controllers.CostsCreate.showEdit(id: Int)
POST        /costs/edit                             controllers.CostsCreate.doEdit(id: Int)
POST        /costs/proof                            controllers.CostsCreate.doUpdateProof(id: Int)

#Refuels
GET         /refuels                                controllers.Refuels.showRefuels()
GET         /refuels/page                           controllers.Refuels.showUserRefuelsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /refuels/owner/page                     controllers.Refuels.showOwnerRefuelsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /refuels/admin/page                     controllers.Refuels.showAllRefuelsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /refuels/proof                          controllers.Refuels.getProof(id: Int)
GET         /refuels/aor                            controllers.RefuelApprove.approveOrReject(id: Int, o: Boolean)
POST        /refuels/aor                            controllers.RefuelApprove.doApproveOrReject(id: Int, o: Boolean)
GET         /refuels/approve                        controllers.RefuelApprove.approve(id: Int)
GET         /refuels/details                        controllers.Refuels.showDetails(id: Int)
GET         /refuels/trip                           controllers.Refuels.showRefuelsForTrip(id: Int, o: Boolean)
POST        /refuels/new                            controllers.RefuelCreate.doCreate(id: Int, o: Boolean)

GET         /refuels/overview                       controllers.Refuels.startOverviewForCar(id: Int)
POST        /refuels/overview                       controllers.Refuels.doStartOverviewForCar(id: Int)

#Damages
GET         /damages                                controllers.Damages.showDamages()
GET         /damages/page                           controllers.Damages.showDamagesPage(page: Int, pageSize:Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /damages/owner                          controllers.Damages.showDamagesOwner()
GET         /damages/owner/page                     controllers.Damages.showDamagesPageOwner(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /damages/admin                          controllers.Damages.showAllDamages()
GET         /damages/admin/page                     controllers.Damages.showDamagesPageAdmin(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /damages/details                        controllers.Damages.showDamageDetails(damageId: Int)
GET         /damages/edit                           controllers.Damages.editDamage(damageId: Int)
GET         /damages/status                         controllers.Damages.addStatus(damageId: Int)
POST        /damages/status                         controllers.Damages.addStatusPost(damageId: Int)
GET         /damages/proof                          controllers.Damages.addProof(damageId: Int)
POST        /damages/proof                          controllers.Damages.addProofPost(damageId: Int)
GET         /damages/proof/file                     controllers.Damages.getProof(proofId: Int)
GET         /damages/proof/deletefile               controllers.Damages.deleteProof(damageId: Int, fileId: Int)
POST        /damages/edit                           controllers.Damages.editDamagePost(damageId: Int)
GET         /damages/finished                       controllers.Damages.setDamageFinished(damageId: Int, status: Int)

# Maps
GET         /maps/tile                              controllers.Maps.getMap(zoom: Int, x: Int, y:Int)
GET         /maps/test                              controllers.Maps.showMap()

#Billing (reporting)
GET         /billing/list                           controllers.Billings.list(id: Int ?= 0)
GET         /billing/user                           controllers.Billings.userDetails(id:Int, uid: Int ?= 0)
GET         /billing/users                          controllers.Billings.userInvoices(id:Int, page: Int, pageSize: Int)
GET         /billing/car                            controllers.Billings.carDetails(id: Int, cid: Int)
GET         /billing/cars                           controllers.Billings.carInvoices(id:Int)
GET         /billing/pdf/invoice                    controllers.Billings.invoicePdf(id:Int)

# Billing (admin)
GET         /billadm/list                           controllers.BillingsAdmin.listAll()
GET         /billadm/prices                         controllers.BillingsAdmin.showPrices(id: Int)
POST        /billadm/prices                         controllers.BillingsAdmin.doEditPrices(id: Int)
GET         /billadm/anom                           controllers.BillingsAdmin.showAnomalies(id: Int)
POST        /billadm/anom                           controllers.BillingsAdmin.doShowAnomalies(id: Int)
GET         /billadm/archive                        controllers.BillingsAdmin.archive(id: Int)
POST        /billadm/create                         controllers.BillingsAdmin.doCreate()
GET         /billadm/select                         controllers.BillingsAdmin.selectCars(id: Int)
POST        /billadm/select                         controllers.BillingsAdmin.doSelectCars(id: Int)
GET         /billadm/simulation                     controllers.BillingsAdmin.simulation(id: Int)
POST        /billadm/simulation                     controllers.BillingsAdmin.doSimulation(id: Int)
GET         /billadm/users                          controllers.BillingsAdmin.userInvoices(id: Int)
POST        /billadm/users                          controllers.BillingsAdmin.doUserInvoices(id: Int)
GET         /billadm/cars                           controllers.BillingsAdmin.carInvoices(id: Int)
POST        /billadm/cars                           controllers.BillingsAdmin.doCarInvoices(id: Int)

#Assistance
GET         /assistances/list                       controllers.Assistances.showAllAssistances()
GET         /assistances/admin/page                 controllers.Assistances.showAllAssistancesPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")

#Parkingcard
GET         /parkingcards/list                       controllers.Parkingcards.showAllParkingcards()
GET         /parkingcards/admin/page                 controllers.Parkingcards.showAllParkingcardsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")

#Announcements
GET         /announcements                          controllers.Announcements.index()
GET         /announcements/edit                     controllers.Announcements.edit(key: String)
POST        /announcements/edit                     controllers.Announcements.doEdit(key: String)

# User Picker
GET         /userpicker                             controllers.UserPicker.getList(search: String ?= "", status : String ?= "")
# Car Picker
GET         /carpicker                              controllers.CarPicker.getList(search: String ?= "")
# Invoice Picker
GET         /invoicepicker                          controllers.InvoicePicker.getList(search: String ?= "")

# Reporting
GET         /reports/billadm/car                    controllers.Reports.billingCarOverview(id: Int)
GET         /reports/billadm/user                   controllers.Reports.billingUserOverview(id: Int)

# Javascript routing
GET         /assets/javascripts/routes              controllers.Application.javascriptRoutes()
GET         /assets/javascripts/paginationRoutes    controllers.Application.paginationRoutes()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                           controllers.Assets.at(path="/public", file)

#Calendar Events
GET         /calendarevents/reservation             controllers.CalendarEvents.getEventForReservation(id: Int, separator: String)
GET         /calendarevents/car                     controllers.CalendarEvents.getEventsForCar(id: Int, separator: String)

# API routes
GET         /api/car/stands                         controllers.api.ApiCars.getStands()
GET         /api/invoices/search/:needle            controllers.api.ApiInvoices.filterInvoicesAndUsers(needle: String)
GET         /api/invoices/number/:nr                controllers.api.ApiInvoices.getInvoiceAndUserByNumber(nr: String)
GET         /api/invoices/unpaid                    controllers.api.ApiInvoices.getUnpaidInvoices()
GET         /api/invoices/:id                       controllers.api.ApiInvoices.getInvoiceAndUser(id: Int)
GET         /api/invoices                           controllers.api.ApiInvoices.findInvoices(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
POST        /api/invoices/membership/new/:id        controllers.api.ApiInvoices.createMembershipInvoice(id: Int)
POST        /api/invoices                           controllers.api.ApiInvoices.updateInvoice()
GET         /api/payments/search/:needle            controllers.api.ApiPayments.filterPaymentsAndUsers(needle: String)
POST        /api/invoices/link                      controllers.api.ApiInvoices.createInvoicePaymentRelationship()
POST        /api/payments/link                      controllers.api.ApiPayments.createPaymentInvoiceRelationship()
POST        /api/payments/user                      controllers.api.ApiPayments.updateUserForPayment()
POST        /api/payments/includeInBalance          controllers.api.ApiPayments.updateIncludeInBalanceForPayment()
POST        /api/payments/status                    controllers.api.ApiPayments.updateStatusForPayment()
POST        /api/payments/unlink                    controllers.api.ApiPayments.removeInvoicesForPayment()
POST        /api/invoices/unlink                    controllers.api.ApiInvoices.removePaymentsForInvoice()
GET         /api/payments/userStats                 controllers.api.ApiPaymentStatistics.getUserStats(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /api/payments/userStats/:id             controllers.api.ApiPaymentStatistics.getPaymentStatsByUser(id: Int)
GET         /api/payments/quarterStats              controllers.api.ApiPaymentStatistics.getQuarterStats()
GET         /api/payments/:id                       controllers.api.ApiPayments.getPayment(id: Int)
GET         /api/payments                           controllers.api.ApiPayments.findPayments(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /api/users/filter                       controllers.api.ApiUsers.filterUsers(search: String ?= "", status : String ?= "")
GET         /api/users/:id                          controllers.api.ApiUsers.getUser(id: Int)
PUT         /api/users/:id/contractDate             controllers.api.ApiUsers.updateContractDate(id: Int)
GET         /api/reminders                          controllers.api.ApiReminders.findReminders(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
POST        /api/reminders/create                   controllers.api.ApiReminders.createReminders()
POST        /api/reminders/mail/:id                 controllers.api.ApiReminders.sendMail(id: Int)
GET         /api/codas                              controllers.api.ApiCodas.findCodas(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
POST        /api/upload-coda                        controllers.api.ApiCodas.uploadCoda()
GET         /api/trips/car/:id                      controllers.api.ApiTrips.findTripsByCar(id: Int)
GET         /api/trips/:id                          controllers.api.ApiTrips.getTrip(id: Int)
GET         /api/approvals/cars                     controllers.api.ApiCarApprovals.findCarApprovals(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
PUT         /api/cars/updateapproval/:carApprovalId controllers.api.ApiCarApprovals.updateCarApproval(carApprovalId: Int)
GET         /api/approvals/caradmins                controllers.api.ApiCarApprovals.findCarAdmins()
GET         /api/cars/:id                           controllers.api.ApiAutos.getAuto(id: Int)
GET         /api/cars/user/:userId                  controllers.api.ApiAutos.getAutoByUserId(userId: Int)
POST        /api/cars/new                           controllers.api.ApiAutos.createAuto()
PUT         /api/cars/update/:autoId                controllers.api.ApiAutos.updateAuto(autoId: Int)
PUT         /api/cars/image                         controllers.api.ApiAutos.updateImage()
GET         /api/cars                               controllers.api.ApiAutos.findAutos(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /api/users                              controllers.api.ApiUsers.findUsers(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
POST        /api/users/role                         controllers.api.ApiUsers.createUserRole()
GET         /api/properties/key/:key                controllers.api.ApiProperties.getPropertyByKey(key: String)
GET         /api/properties/:id                     controllers.api.ApiProperties.getProperty(id: Int)
PUT         /api/properties/image/:id               controllers.api.ApiProperties.updateImage(id: Int)
PUT         /api/properties/:id                     controllers.api.ApiProperties.updateProperty(id: Int)
GET         /api/images/:id                         controllers.api.ApiImages.getImage(id: Int)
GET         /api/images/thumbnails/:id              controllers.api.ApiImages.getThumbnail(id: Int)
GET         /api/auto/:id                           controllers.api.ApiAutos.getAuto(id: Int)
GET         /api/infosessions/upcoming              controllers.api.ApiInfosessions.getUpcomingInfosessions()
GET         /api/infosessions/attending             controllers.api.ApiInfosessions.getAttendingInfoSession()
PUT         /api/cars/document                      controllers.api.ApiDocuments.uploadDocument(autoId: Int, documentType: String)
POST 		    /api/reservations/create/:carId 			  controllers.api.ApiReservations.doCreate(carId: Int)
GET         /api/cars/initialstate/:carId           controllers.api.ApiAutos.getAutoInitialState(carId: Int)
POST        /api/cars/initialstate/delete           controllers.api.ApiAutos.deleteAutoInitialStateFile()
PUT         /api/cars/initialstate/add/:carId       controllers.api.ApiAutos.addAutoInitialStateFile(carId: Int)

# React-router frontend routes
GET         /credit/payments                        controllers.ReactRouter.creditManagement(route: String ?="PAYMENTS")
GET         /credit/userstats                       controllers.ReactRouter.creditManagement(route: String ?="USER_STATISTICS")
GET         /credit/quarterstats                    controllers.ReactRouter.creditManagement(route: String ?="QUARTER_STATISTICS")
GET         /credit/invoices                        controllers.ReactRouter.creditManagement(route: String ?="INVOICES")
GET         /credit/reminders                       controllers.ReactRouter.creditManagement(route: String ?="REMINDERS")
GET         /credit/coda-upload                     controllers.ReactRouter.creditManagement(route: String ?="CODA_UPLOAD")
GET         /credit/users                           controllers.ReactRouter.creditManagement(route: String ?="USERS")
GET         /settings                               controllers.ReactRouter.settingsManagement(route: String ?="SETTINGS")
GET         /approvals/cars/request                 controllers.ReactRouter.carApprovals(route: String ?="REQUEST")
GET         /approvals/cars/accepted                controllers.ReactRouter.carApprovals(route: String ?="ACCEPTED")
GET         /approvals/cars/refused                 controllers.ReactRouter.carApprovals(route: String ?="REFUSED")

# Debtor management
GET         /invoices/list                          controllers.Invoices.getAll()
GET         /invoices/page                          controllers.Invoices.showInvoicesPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /invoices/save                          controllers.Invoices.saveInvoices(billingId: Int)
GET         /invoices/details                       controllers.Invoices.showDetails(id: Int)
GET         /invoices/edit                          controllers.Invoices.editInvoice(id: Int)
POST        /invoices/edit                          controllers.Invoices.editInvoicePost(id: Int)
GET         /invoices/:id/payments                  controllers.Invoices.getPaymentsForInvoice(id: Int)
GET         /payments/:id/suggestPayments           controllers.Invoices.getSuggestedPaymentsForInvoice(id: Int)
GET         /invoices/user/:id                      controllers.Invoices.getInvoicesForUser(id: Int)
GET         /invoices/check                         controllers.Invoices.checkDueDate()
GET         /invoices/:id/unlink                    controllers.Invoices.unlinkInvoice(id: Int)

# Payment management
GET         /credit/payments/list                   controllers.Payments.getAll()
GET         /payments/page                          controllers.Payments.showPaymentsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /payments/new                           controllers.Payments.newPayment()
POST        /payments/new                           controllers.Payments.createNewPayment()
GET         /payments/details                       controllers.Payments.showDetails(id: Int)
GET         /payments/edit                          controllers.Payments.editPayment(id: Int)
POST        /payments/edit                          controllers.Payments.editPaymentPost(id: Int)
GET         /payments/:id/invoices                  controllers.Payments.getInvoicesForPayment(id: Int)
GET         /payments/:id/suggestInvoices           controllers.Payments.getSuggestedInvoicesForPayment(id: Int)
GET         /payments/user/:id                      controllers.Payments.getPaymentsForUser(id: Int)
GET         /payments/stats                         controllers.PaymentStatistics.getStats()
GET         /payments/userStats                     controllers.PaymentStatistics.getUserStats()
GET         /payments/userStatsPage                 controllers.PaymentStatistics.showUserStatsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /payments/:paymentId/link/:invoiceId   controllers.Payments.createPaymentInvoiceRelationship(paymentId: Int, invoiceId: Int)


# Coda upload
GET         /codas/upload                           controllers.Codas.uploadCoda()
POST        /codas/upload                           controllers.Codas.uploadCodaPost()
GET         /codas/page                             controllers.Codas.showCodasPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")


GET         /reminders/check                         controllers.Reminders.sendReminders()
GET         /reminders/list                          controllers.Reminders.getAll()
GET         /reminders/page                          controllers.Reminders.showRemindersPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
