# routes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Copyright â’¸ 2014-2015 Universiteit Gent
#
# This file is part of the Degage Web Application
#
# Corresponding author (see also AUTHORS.txt)
#
# Kris Coolsaet
# Department of Applied Mathematics, Computer Science and Statistics
# Ghent University
# Krijgslaan 281-S9
# B-9000 GENT Belgium
#
# The Degage Web Application is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The Degage Web Application is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with the Degage Web Application (file LICENSE.txt in the
# distribution).  If not, see http://www.gnu.org/licenses/.

# This file defines all application routes (Higher priority routes first)

# Home page
GET         /                                       controllers.Application.index()

# UserRoles
GET         /userroles                              controllers.UserRoles.index()
GET         /userroles/page                         controllers.UserRoles.showUsersPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /userroles/edit                         controllers.UserRoles.edit(userId: Int)
POST        /userroles/edit                         controllers.UserRoles.editPost(userId: Int)

# Drives
GET         /drives                                 controllers.Drives.index(status: String ?= "ACCEPTED")
GET         /drives/page                            controllers.Drives.showDrivesPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /drives/admin                           controllers.Drives.drivesAdmin()
GET         /drives/admin/page                      controllers.Drives.showDrivesAdminPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /drive/details                          controllers.Drives.details(reservationId: Int)
GET         /drive/approval                         controllers.Drives.approveOrReject(reservationId: Int)
POST        /drive/approval                         controllers.Drives.approveOrRejectPost(reservationId: Int)
GET         /drive/newinfo                          controllers.Drives.newJourneyInfo(reservationId: Int)
POST        /drive/newinfo                          controllers.Drives.newJourneyInfoPost(reservationId: Int)
GET         /drive/editinfo                         controllers.Drives.editJourneyInfo(reservationId: Int)
POST        /drive/editinfo                         controllers.Drives.editJourneyInfoPost(reservationId: Int)
GET         /drive/approve_info                     controllers.Drives.approveDriveInfo(reservationId: Int)
GET         /drive/cancel                           controllers.Drives.cancelReservation(reservationId: Int)
GET         /drive/shorten                          controllers.Drives.shortenReservation(reservationId: Int)
POST        /drive/shorten                          controllers.Drives.shortenReservationPost(reservationId: Int)

# Reservations
GET         /reserve                                controllers.Reserve.index()
GET         /reserve/overview                       controllers.Reserve.overview(date: String ?= null)
POST        /reserve/overview                       controllers.Reserve.overviewPost()
GET         /reserve/car/index                      controllers.Reserve.indexWithCar(carName: String, id: Int)
GET         /reserve/car/start                      controllers.Reserve.startCar()
POST        /reserve/car/overview                   controllers.Reserve.overviewCarPost()

GET         /reserve/list                           controllers.Reserve.listAvailableCarsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /reserve/car/reserve                    controllers.Reserve.reserveCar(carId: Int, from: String, until: String)
POST        /reserve/car/reserve                    controllers.Reserve.doReservation(carId: Int)

# Receipts
GET         /receipts                               controllers.Receipts.index()
GET         /receipts/page                          controllers.Receipts.showReceiptsPage(page: Int, asc: Int ?= 1,orderBy: String ?= "", filter: String ?= "")


# User pages
GET         /settings                               controllers.Settings.index()

# Notifiers
GET         /messages                               controllers.Messages.showMessages()
GET         /messages/received/page                 controllers.Messages.showReceivedMessagesPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /messages/sent/page                     controllers.Messages.showSentMessagesPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /messages/markasread                    controllers.Messages.markMessageAsRead(messageId: Int)
GET         /messages/markallasread                 controllers.Messages.markAllMessagesAsRead()
GET         /messages/new                           controllers.Messages.newMessage()
GET         /messages/reply                         controllers.Messages.reply(messageId: Int)
POST        /messages/new                           controllers.Messages.createNewMessage()
GET         /notifications                          controllers.Notifications.showNotifications()
GET         /notifications/markasread               controllers.Notifications.markNotificationAsRead(notificationId: Int)
GET         /notifications/markallasread            controllers.Notifications.markAllNotificationsAsRead()
GET         /notifications/page                     controllers.Notifications.showNotificationsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")

# Profile pages
GET         /profile                                controllers.Profile.indexWithoutId()
GET         /profile/edit                           controllers.Profile.edit(userId: Int)
POST        /profile/edit                           controllers.Profile.editPost(userId: Int)
GET         /profile/byid                           controllers.Profile.index(userId: Int)
GET         /profile/changepicture                  controllers.Profile.profilePictureUpload(userId: Int)
POST        /profile/changepicture                  controllers.Profile.profilePictureUploadPost(userId: Int)
GET         /profile/picture                        controllers.Profile.getProfilePicture(userId: Int)
GET         /profile/identitycard                   controllers.Profile.editIdentityCard(userId: Int)
POST        /profile/identitycard                   controllers.Profile.editIdentityCardPost(userId: Int)
POST        /profile/identitycard/addfile           controllers.Profile.addIdentityCardFile(userId: Int)
GET         /profile/identitycard/deletefile        controllers.Profile.deleteIdentityFile(userId: Int, fileId: Int)
GET         /profile/identitycard/file              controllers.Profile.viewIdentityFile(userId: Int, fileId: Int)
GET         /profile/driverslicense                 controllers.Profile.editDriversLicense(userId: Int)
POST        /profile/driverslicense                 controllers.Profile.editDriversLicensePost(userId: Int)
GET         /profile/driverslicense/deletefile      controllers.Profile.deleteLicenseFile(userId: Int, fileId: Int)
GET         /profile/driverslicense/file            controllers.Profile.viewLicenseFile(userId: Int, fileId: Int)
POST        /profile/driverslicense/addfile         controllers.Profile.addDriversLicenseFile(userId: Int)
GET         /profile/status                         controllers.Profile.editUserStatus(userId: Int)
GET         /profile/status/block                   controllers.Profile.blockUser(userId: Int)
GET         /profile/status/unblock                 controllers.Profile.unblockUser(userId: Int)
GET         /profile/status/full                    controllers.Profile.makeFullUser(userId: Int)
GET         /profile/deposit                        controllers.Profile.deposit(userId: Int)
POST        /profile/deposit                        controllers.Profile.depositPost(userId: Int)

# Users
GET         /users                                  controllers.Users.showUsers()
GET         /users/page                             controllers.Users.showUsersPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /users/impersonate                      controllers.Users.impersonate(userId: Int)

# Login screen
GET         /login                                  controllers.Login.login(redirect ?= null)
POST        /login                                  controllers.Login.authenticate(redirect ?= null)
GET         /logout                                 controllers.Login.logout()
GET         /pwreset/request                        controllers.Login.resetPasswordRequest()
POST        /pwreset/request                        controllers.Login.resetPasswordRequestPost()
GET         /pwreset                                controllers.Login.resetPassword(token: String)
POST        /pwreset                                controllers.Login.resetPasswordPost(token: String)
GET         /register/request                       controllers.Login.requestRegistration()
POST        /register/request                       controllers.Login.requestRegistrationPost()
GET         /register                               controllers.Login.registerVerification(token: String)
POST        /register                               controllers.Login.registerVerificationPost(token: String)

# Infosessions
GET         /infosession/new                        controllers.InfoSessions.newSession()
POST        /infosession/new                        controllers.InfoSessions.createNewSession()
GET         /infosession                            controllers.InfoSessions.showUpcomingSessions()
GET         /infosession/admin                      controllers.InfoSessions.showSessions()
GET         /infosession/enroll                     controllers.InfoSessions.enrollSession(id: Int)
GET         /infosession/unenroll                   controllers.InfoSessions.unenrollSession()
GET         /infosession/view                       controllers.InfoSessions.detail(id: Int)
GET         /infosession/removeAttendee             controllers.InfoSessions.removeUserFromSession(sessionId: Int, userId: Int)
GET         /infosession/edit                       controllers.InfoSessions.editSession(sessionId: Int)
POST        /infosession/edit                       controllers.InfoSessions.editSessionPost(sessionId: Int)
GET         /infosession/status                     controllers.InfoSessions.setUserSessionStatus(sessionId: Int, userId: Int, status: String)
GET         /infosession/delete                     controllers.InfoSessions.removeSession(sessionId: Int)
POST        /infosession/adduser                    controllers.InfoSessions.addUserToSession(sessionId: Int)

# Approvals for membership
GET         /approval                               controllers.Approvals.requestApproval()
POST        /approval                               controllers.Approvals.requestApprovalPost()
GET         /approvals/page                         controllers.Approvals.pendingApprovalListPaged(page: Int)
GET         /approvals                              controllers.Approvals.pendingApprovalList()
GET         /approval/details                       controllers.Approvals.approvalDetails(id: Int)
POST        /approval/details                       controllers.Approvals.approvalAdminAction(id: Int)
GET         /approval/admin                         controllers.Approvals.approvalAdmin(id: Int)
POST        /approval/admin                         controllers.Approvals.approvalAdminPost(id: Int)

# Settings
GET         /settings/sysvars/edit                  controllers.Settings.editSysvar(name: String)
POST        /settings/sysvars/edit                  controllers.Settings.editSysvarPost(name: String)
GET         /settings/sysvars                       controllers.Settings.sysvarsOverview()
GET         /changepass                             controllers.Settings.changePassword()
POST        /changepass                             controllers.Settings.changePasswordPost()


# Cars
GET         /cars/admin                             controllers.Cars.showCars()
GET         /cars                                   controllers.Cars.showUserCars()
GET         /cars/page                              controllers.Cars.showCarsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /cars/new                               controllers.Cars.newCar()
POST        /cars/new                               controllers.Cars.addNewCar()
GET         /cars/view                              controllers.Cars.detail(id: Int)
GET         /cars/edit                              controllers.Cars.editCar(carId: Int)
POST        /cars/edit                              controllers.Cars.editCarPost(carId: Int)
GET         /cars/picture                           controllers.Cars.getPicture(carId: Int)
GET         /cars/modal/carcost                     controllers.Cars.getCarCostModal(carId: Int)
POST        /cars/carcost/new                       controllers.Cars.addNewCarCost(carId: Int)
GET         /cars/carcosts                          controllers.Cars.showCarCosts()
GET         /cars/carcosts/page                     controllers.Cars.showCarCostsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /cars/carcosts/approved                 controllers.Cars.approveCarCost(carCostId: Int, returnToDetail: Int)
GET         /cars/carcosts/refused                  controllers.Cars.refuseCarCost(carCostId: Int, returnToDetail: Int)
GET         /cars/carcosts/proof                    controllers.Cars.getProof(proofId: Int)
GET         /cars/privileges/edit                   controllers.Cars.updatePrivileged(carId : Int, values : String)

# (Temporarily) disables
#GET         /cars/availabilities/edit               controllers.Availabilities.updateAvailabilities(carId : Int, values : String)

#Refuels
GET         /refuels                                controllers.Refuels.showRefuels()
GET         /refuels/page                           controllers.Refuels.showUserRefuelsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /refuels/owner                          controllers.Refuels.showOwnerRefuels()
GET         /refuels/owner/page                     controllers.Refuels.showOwnerRefuelsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /refuels/admin                          controllers.Refuels.showAllRefuels()
GET         /refuels/admin/page                     controllers.Refuels.showAllRefuelsPage(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /refuels/proof                          controllers.Refuels.getProof(proofId: Int)
GET         /refuels/owner/approved                 controllers.Refuels.approveRefuel(refuelId: Int)
GET         /refuels/owner/refused                  controllers.Refuels.refuseRefuel(refuelId: Int)

# new UI
GET         /refuels/ride                           controllers.Refuels.showRefuelsForRide(id: Int)
POST        /refuels/new                            controllers.Refuels.newRefuelForRidePost(id: Int)

#Damages
GET         /damages                                controllers.Damages.showDamages()
GET         /damages/page                           controllers.Damages.showDamagesPage(page: Int, pageSize:Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /damages/owner                          controllers.Damages.showDamagesOwner()
GET         /damages/owner/page                     controllers.Damages.showDamagesPageOwner(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /damages/admin                          controllers.Damages.showAllDamages()
GET         /damages/admin/page                     controllers.Damages.showDamagesPageAdmin(page: Int, pageSize: Int, asc: Int ?= 1, orderBy: String ?= "", filter: String ?= "")
GET         /damages/details                        controllers.Damages.showDamageDetails(damageId: Int)
GET         /damages/edit                           controllers.Damages.editDamage(damageId: Int)
GET         /damages/status                         controllers.Damages.addStatus(damageId: Int)
POST        /damages/status                         controllers.Damages.addStatusPost(damageId: Int)
GET         /damages/proof                          controllers.Damages.addProof(damageId: Int)
POST        /damages/proof                          controllers.Damages.addProofPost(damageId: Int)
GET         /damages/proof/file                     controllers.Damages.getProof(proofId: Int)
GET         /damages/proof/deletefile               controllers.Damages.deleteProof(damageId: Int, fileId: Int)
POST        /damages/edit                           controllers.Damages.editDamagePost(damageId: Int)
GET         /damages/finished                       controllers.Damages.setDamageFinished(damageId: Int, status: Int)

# Maps
GET         /maps/tile                              controllers.Maps.getMap(zoom: Int, x: Int, y:Int)
GET         /maps/test                              controllers.Maps.showMap()

# Reports
GET         /reports                                controllers.Reports.index()
GET         /reports/users                          controllers.Reports.getUsers()
GET         /reports/reservations                   controllers.Reports.getReservations()
GET         /reports/reservations/owner             controllers.Reports.getReservationsForOwner()
GET         /reports/cars                           controllers.Reports.getCars()

# User Picker
GET         /userpicker                             controllers.UserPicker.getList(search: String ?= "")
# Car Picker
GET         /carpicker                              controllers.CarPicker.getList(search: String ?= "")

# Javascript routing
GET         /assets/javascripts/routes              controllers.Application.javascriptRoutes()
GET         /assets/javascripts/paginationRoutes    controllers.Application.paginationRoutes()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                           controllers.Assets.at(path="/public", file)
