# application.conf
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Copyright â’¸ 2014-2015 Universiteit Gent
#
# This file is part of the Degage Web Application
#
# Corresponding author (see also AUTHORS.txt)
#
# Kris Coolsaet
# Department of Applied Mathematics, Computer Science and Statistics
# Ghent University
# Krijgslaan 281-S9
# B-9000 GENT Belgium
#
# The Degage Web Application is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The Degage Web Application is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with the Degage Web Application (file LICENSE.txt in the
# distribution).  If not, see <http://www.gnu.org/licenses/>.

# This is the main configuration file for the application.

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
# [kc] used uuidgen.com twice
application.secret="49494536-02b9-11e4-9cb5-0226a717e6e0-c16c1095-a6bd-49cf-898d-0e7f701ceacb"

# The application languages
# ~~~~~
application.langs="nl"

# JavaGlobal object class
# ~~~~~
# Define the JavaGlobal object class for this application.
# Default to JavaGlobal in the root package.
# application.global=JavaGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# [kc] drivers are specified in prod.conf, dev.conf and test.conf
#
# [kc] email config is specified in prod.conf, dev.conf and test.conf

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled


# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Logger configured in conf/logger.xml


# Email configuration
smtp.host=localhost
smtp.port=25
smtp.ssl=no

# File uploads path
# Start with a ./ if you want it to be a relative path to the Play installation
# uploads.path=./uploads # in dev.conf/prod.conf and test.conf
uploads.profile=profilepictures
uploads.identitycard=identitycards
uploads.driverslicense=driverslicenses
uploads.carboundproofs=carboundproofs
uploads.refuelproofs=refuelproofs
uploads.damages=damages
uploads.carregistrations=carregistrations
uploads.carphotos=carphotos

# Generated files path
# generated.path=./generated # in dev.conf/prod.conf and test.conf

#Class path, relative to target/universal/stage
application.classpath=../../scala-2.11/classes

# to use hikari instead of bonecp
dbplugin=disabled

